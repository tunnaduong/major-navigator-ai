import { GoogleGenerativeAI } from "@google/generative-ai";

// L·∫•y API key t·ª´ environment variables
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
  console.warn(
    "Gemini API key kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng th√™m VITE_GEMINI_API_KEY v√†o file .env"
  );
}

// T·∫°o client Gemini
export const gemini = new GoogleGenerativeAI(GEMINI_API_KEY || "");

// Ki·ªÉm tra k·∫øt n·ªëi Gemini
export async function testGeminiConnection(): Promise<boolean> {
  try {
    console.log("üîç Debug - API Key info:", {
      exists: !!GEMINI_API_KEY,
      length: GEMINI_API_KEY?.length || 0,
      starts: GEMINI_API_KEY?.substring(0, 10) || "N/A",
      env: import.meta.env.MODE,
    });

    if (!GEMINI_API_KEY) {
      throw new Error("API key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh");
    }

    // Th·ª≠ g·ªçi API ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
    const model = gemini.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent("Hello");
    const response = await result.response;
    const text = response.text();

    console.log(
      "‚úÖ K·∫øt n·ªëi Gemini th√†nh c√¥ng, response:",
      text.substring(0, 50) + "..."
    );
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi Gemini:", error);
    if (error instanceof Error) {
      console.error("Chi ti·∫øt l·ªói:", error.message);
    }
    return false;
  }
}
