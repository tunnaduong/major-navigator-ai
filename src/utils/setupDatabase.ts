import { supabase } from "@/integrations/supabase/client";

// Function ƒë·ªÉ t·∫°o table quiz_results (n·∫øu ch∆∞a c√≥)
export async function setupDatabase() {
  try {
    // Th·ª≠ query ƒë·ªÉ ki·ªÉm tra table ƒë√£ t·ªìn t·∫°i ch∆∞a
    const { error: checkError } = await supabase
      .from("quiz_results")
      .select("id")
      .limit(1);

    if (checkError) {
      console.log(
        "Table quiz_results ch∆∞a t·ªìn t·∫°i, c·∫ßn t·∫°o trong Supabase dashboard"
      );
      console.log("Vui l√≤ng ch·∫°y migration SQL sau trong Supabase dashboard:");
      console.log(`
-- T·∫°o table quiz_results ƒë·ªÉ l∆∞u k·∫øt qu·∫£ quiz
CREATE TABLE quiz_results (
    id TEXT PRIMARY KEY,
    submission_data JSONB NOT NULL,
    scores JSONB NOT NULL,
    top_majors JSONB NOT NULL,
    reasons TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- T·∫°o index ƒë·ªÉ tƒÉng t·ªëc query
CREATE INDEX idx_quiz_results_created_at ON quiz_results(created_at);

-- Enable RLS (Row Level Security)
ALTER TABLE quiz_results ENABLE ROW LEVEL SECURITY;

-- T·∫°o policy cho ph√©p public read
CREATE POLICY "Allow public read" ON quiz_results
    FOR SELECT USING (true);

-- T·∫°o policy cho ph√©p public insert
CREATE POLICY "Allow public insert" ON quiz_results
    FOR INSERT WITH CHECK (true);
      `);
      return false;
    }

    console.log("‚úÖ Table quiz_results ƒë√£ t·ªìn t·∫°i v√† s·∫µn s√†ng s·ª≠ d·ª•ng");
    return true;
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra database:", error);
    return false;
  }
}

// Function test connection
export async function testSupabaseConnection() {
  try {
    console.log("üîç ƒêang test k·∫øt n·ªëi Supabase...");
    console.log("üìã URL:", supabase.supabaseUrl);
    console.log("üîë API Key:", supabase.supabaseKey.substring(0, 20) + "...");

    // Test 1: Ki·ªÉm tra basic connection v·ªõi m·ªôt table ch·∫Øc ch·∫Øn t·ªìn t·∫°i
    const { data: healthCheck, error: healthError } = await supabase
      .from("quiz_results")
      .select("*")
      .limit(1);

    if (healthError) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi c∆° b·∫£n:", healthError);
      console.log("Chi ti·∫øt l·ªói:", {
        message: healthError.message,
        code: healthError.code,
        details: healthError.details,
        hint: healthError.hint,
      });
      return false;
    }

    console.log("‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng!");
    console.log("üìä D·ªØ li·ªáu test:", healthCheck);
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi Supabase:", error);
    return false;
  }
}

// Function test th·ª±c t·∫ø v·ªõi insert/select
export async function testSupabaseOperations() {
  try {
    console.log("üß™ ƒêang test c√°c operations Supabase...");

    const testId = `test_${Date.now()}`;
    const testData = {
      id: testId,
      submission_data: { name: "Test User", test: true },
      scores: { math: 8, english: 7 },
      top_majors: [{ majorId: "software", score: 0.85 }],
      reasons: "Test connection",
    };

    // Test INSERT
    console.log("üìù Test INSERT...");
    const { error: insertError } = await supabase
      .from("quiz_results")
      .insert(testData);

    if (insertError) {
      console.error("‚ùå L·ªói INSERT:", insertError);
      return false;
    }
    console.log("‚úÖ INSERT th√†nh c√¥ng");

    // Test SELECT
    console.log("üìñ Test SELECT...");
    const { data: selectData, error: selectError } = await supabase
      .from("quiz_results")
      .select("*")
      .eq("id", testId)
      .single();

    if (selectError) {
      console.error("‚ùå L·ªói SELECT:", selectError);
      return false;
    }
    console.log("‚úÖ SELECT th√†nh c√¥ng:", selectData);

    // Clean up: DELETE test data
    console.log("üóëÔ∏è Cleanup test data...");
    const { error: deleteError } = await supabase
      .from("quiz_results")
      .delete()
      .eq("id", testId);

    if (deleteError) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a test data:", deleteError);
    } else {
      console.log("‚úÖ Cleanup th√†nh c√¥ng");
    }

    console.log("üéâ T·∫•t c·∫£ operations ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!");
    return true;
  } catch (error) {
    console.error("‚ùå L·ªói test operations:", error);
    return false;
  }
}
